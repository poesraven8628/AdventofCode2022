(ql:quickload "str")

(defun get-all-input (input)
  (with-open-file (stream input)
    (loop for line = (read-line stream nil)
          while line
          collect line)))

(defun parse-list (s)
  (setf s (str:replace-all "[" "(" s))
  (setf s (str:replace-all "]" ")" s))
  (setf s (str:replace-all "," " " s))
  (read-from-string s))

(defun comp-l (a b)
  (cond ((and (numberp a) (numberp b))
	 (cond ((< a b) 'pass)
	       ((equal a b) 'cont)
	       (t 'fail)))
	((and (numberp a) (listp b))
	 (comp-l (list a) b))
	((and (listp a) (numberp b))
	 (comp-l a (list b)))
	((and (listp a) (listp b))
	 (comp-list a b))))

(defun comp-list (a b)
  (do ((ret nil)
       (i 0 (+ i 1)))
      (() ret)
    (if (and (equal i (length a)) (equal i (length b)))
	(return-from comp-list 'cont))
    (if (equal i (length a)) (return-from comp-list 'pass))
    (if (equal i (length b)) (return-from comp-list 'fail))
    (setf ret (comp-l (nth i a) (nth i b)))
    (case ret
      (pass (return-from comp-list 'pass))
      (fail (return-from comp-list 'fail)))))

(defun compare-lists (a b)
  (case (comp-l a b)
    (pass 1)
    (fail 0)))

(defun compare-lists-2 (a b)
  (case (comp-l a b)
    (pass t)
    (fail nil)))

(defun parse-all (s)
  (do* ((lst-1 nil)
	(lst-2 nil)
	(r 0)
	(body s)
	(index 1)
	(ret 0))
       ((null body) ret)
    (setf lst-1 (parse-list (first body)))
    (setf body (rest body))
    (setf lst-2 (parse-list (first body)))
    (setf body (rest (rest body)))
    (setf r (compare-lists lst-1 lst-2))
    (incf ret (* r index))
    (format t "~&Index: ~A Lst-1: ~S Lst2: ~S Val: ~A Total: ~A" index lst-1 lst-2 r ret)
    (finish-output)
    (incf index)))

(defun parse-all-lists (s)
  (do* ((lst-1 nil)
	(lst-2 nil)
	(body s)
	(ret nil))
       ((null body) (progn (push '((2)) ret)
			   (push '((6)) ret)
			   ret))
    (setf lst-1 (parse-list (first body)))
    (setf body (rest body))
    (setf lst-2 (parse-list (first body)))
    (setf body (rest (rest body)))
    (push lst-1 ret)
    (push lst-2 ret)))

(defun sort-lists (lst)
  (sort lst #'compare-lists-2))

(defun decoder-key (lst)
  (let ((k1 0)
	(k2 0)
	(i 1))
    (dolist (e lst (* k1 k2))
      (if (equal e '((2)))
	  (setf k1 i))
      (if (equal e'((6)))
	  (setf k2 i))
      (incf i))))

(parse-all (get-all-input "input.txt"))
(decoder-key (sort-lists (parse-all-lists (get-all-input "small.txt"))))
