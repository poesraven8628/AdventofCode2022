(defun get-all-sections (filename)
  (with-open-file (stream filename)
    (loop for line = (read-line stream nil)
          while line
          collect line)))

(defun tokenize-pair (s)
  (do ((i 0 (+ 1 i))
       (letter (aref s 0))
       (last 0)
       (ret nil))
      ((equal i (length s)) (push (parse-integer (subseq s last i)) ret) (reverse ret))
    (setf letter (aref s i))
    (when (or (equal letter #\-) (equal letter #\,))
      (push (parse-integer (subseq s last i)) ret)
      (setf last (+ i 1)))))

(defun fully-containsp (s)
  (cond ((and (>= (first s) (third s))
	      (<= (second s) (fourth s))) t)
	((and (>= (third s) (first s))
	      (<= (fourth s) (second s))) t)
	(t nil)))

(defun check-all (s)
  (cond ((null s) 0)
	((fully-containsp (tokenize-pair (first s)))
	 (+ 1 (check-all (rest s))))
	(t (check-all (rest s)))))

(defun overlapsp (s)
  (let ((b (- (second s) (first s)))
	(c (- (third s) (first s)))
	(d (- (fourth s) (first s))))
    (cond ((< d 0) nil)
	  ((>= b c) t))))

(defun check-all-2 (s)
  (cond ((null s) 0)
	((overlapsp (tokenize-pair (first s)))
	 (+ 1 (check-all-2 (rest s))))
	(t (check-all-2 (rest s)))))

(check-all (get-all-sections "sections"))
(check-all-2 (get-all-sections "sections"))
