(ql:quickload "str")

(defun get-all-input (input)
  (with-open-file (stream input)
    (loop for line = (read-line stream nil)
          while line
          collect line)))

(defun walk-files (s)
  (do ((cwd nil)
       (sizes nil)
       (siz 0)
       (line (str:split " " (pop s)) (if (null s) nil (str:split " " (pop s)))))
      ((null line) (let ((prev 0))
		     (dotimes (i (length cwd))
		       (setf (nth i cwd) (+ (nth i cwd) prev))
		       (setf prev (nth i cwd)))
		     (dolist (e cwd sizes)
		       (push e sizes))))
    (cond ((null line))
	  ((and (equal (first line) "$")
		(equal (second line) "cd")
		(equal (third line) ".."))
	   (setf siz (pop cwd))
	   (incf (nth 0 cwd) siz)
	   (push siz sizes))
	  ((and (equal (first line) "$")
		(equal (second line) "cd"))
	   (push 0 cwd))
	  ((equal (first line) "$"))
	  ((equal (first line) "dir"))
	  (t (incf (nth 0 cwd) (parse-integer (first line)))))))

(defun sum-smalls (s)
  (reduce #'+ (mapcar #'(lambda (e) (if (<= e 100000) e 0)) s)))

(defun find-target (s)
  (let ((space (- (reduce #'max s) 40000000)))
    (reduce #'min (remove-if #'(lambda (e) (if (<= e space) e)) s))))

(sum-smalls (walk-files (get-all-input "input.txt")))
(find-target (walk-files (get-all-input "input.txt")))
